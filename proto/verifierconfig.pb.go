// Code generated by protoc-gen-gogo.
// source: verifierconfig.proto
// DO NOT EDIT!

package proto

// discarding unused import gogoproto "gogoproto"

import fmt "fmt"
import bytes "bytes"

import strings "strings"
import github_com_andres_erbsen_protobuf_proto "github.com/andres-erbsen/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

type VerifierConfig struct {
	ID                   uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SigningKeyID         string              `protobuf:"bytes,2,opt,name=signing_key_id,proto3" json:"signing_key_id,omitempty"`
	Realm                string              `protobuf:"bytes,3,opt,name=realm,proto3" json:"realm,omitempty"`
	TLS                  *TLSConfig          `protobuf:"bytes,4,opt,name=tls" json:"tls,omitempty"`
	KeyserverAddr        string              `protobuf:"bytes,5,opt,name=keyserver_addr,proto3" json:"keyserver_addr,omitempty"`
	InitialKeyserverAuth AuthorizationPolicy `protobuf:"bytes,6,opt,name=initial_keyserver_auth" json:"initial_keyserver_auth"`
	TreeNonce            []byte              `protobuf:"bytes,7,opt,name=tree_nonce,proto3" json:"tree_nonce,omitempty"`
}

func (m *VerifierConfig) Reset()      { *m = VerifierConfig{} }
func (*VerifierConfig) ProtoMessage() {}

func (m *VerifierConfig) GetTLS() *TLSConfig {
	if m != nil {
		return m.TLS
	}
	return nil
}

func (m *VerifierConfig) GetInitialKeyserverAuth() AuthorizationPolicy {
	if m != nil {
		return m.InitialKeyserverAuth
	}
	return AuthorizationPolicy{}
}

func (this *VerifierConfig) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*VerifierConfig)
	if !ok {
		return fmt.Errorf("that is not of type *VerifierConfig")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *VerifierConfig but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *VerifierConfigbut is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.SigningKeyID != that1.SigningKeyID {
		return fmt.Errorf("SigningKeyID this(%v) Not Equal that(%v)", this.SigningKeyID, that1.SigningKeyID)
	}
	if this.Realm != that1.Realm {
		return fmt.Errorf("Realm this(%v) Not Equal that(%v)", this.Realm, that1.Realm)
	}
	if !this.TLS.Equal(that1.TLS) {
		return fmt.Errorf("TLS this(%v) Not Equal that(%v)", this.TLS, that1.TLS)
	}
	if this.KeyserverAddr != that1.KeyserverAddr {
		return fmt.Errorf("KeyserverAddr this(%v) Not Equal that(%v)", this.KeyserverAddr, that1.KeyserverAddr)
	}
	if !this.InitialKeyserverAuth.Equal(&that1.InitialKeyserverAuth) {
		return fmt.Errorf("InitialKeyserverAuth this(%v) Not Equal that(%v)", this.InitialKeyserverAuth, that1.InitialKeyserverAuth)
	}
	if !bytes.Equal(this.TreeNonce, that1.TreeNonce) {
		return fmt.Errorf("TreeNonce this(%v) Not Equal that(%v)", this.TreeNonce, that1.TreeNonce)
	}
	return nil
}
func (this *VerifierConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VerifierConfig)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.SigningKeyID != that1.SigningKeyID {
		return false
	}
	if this.Realm != that1.Realm {
		return false
	}
	if !this.TLS.Equal(that1.TLS) {
		return false
	}
	if this.KeyserverAddr != that1.KeyserverAddr {
		return false
	}
	if !this.InitialKeyserverAuth.Equal(&that1.InitialKeyserverAuth) {
		return false
	}
	if !bytes.Equal(this.TreeNonce, that1.TreeNonce) {
		return false
	}
	return true
}
func (this *VerifierConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&proto.VerifierConfig{` +
		`ID:` + fmt.Sprintf("%#v", this.ID),
		`SigningKeyID:` + fmt.Sprintf("%#v", this.SigningKeyID),
		`Realm:` + fmt.Sprintf("%#v", this.Realm),
		`TLS:` + fmt.Sprintf("%#v", this.TLS),
		`KeyserverAddr:` + fmt.Sprintf("%#v", this.KeyserverAddr),
		`InitialKeyserverAuth:` + strings.Replace(this.InitialKeyserverAuth.GoString(), `&`, ``, 1),
		`TreeNonce:` + fmt.Sprintf("%#v", this.TreeNonce) + `}`}, ", ")
	return s
}
func valueToGoStringVerifierconfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringVerifierconfig(e map[int32]github_com_andres_erbsen_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func NewPopulatedVerifierConfig(r randyVerifierconfig, easy bool) *VerifierConfig {
	this := &VerifierConfig{}
	this.ID = uint64(uint64(r.Uint32()))
	this.SigningKeyID = randStringVerifierconfig(r)
	this.Realm = randStringVerifierconfig(r)
	if r.Intn(10) != 0 {
		this.TLS = NewPopulatedTLSConfig(r, easy)
	}
	this.KeyserverAddr = randStringVerifierconfig(r)
	v1 := NewPopulatedAuthorizationPolicy(r, easy)
	this.InitialKeyserverAuth = *v1
	v2 := r.Intn(100)
	this.TreeNonce = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.TreeNonce[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyVerifierconfig interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneVerifierconfig(r randyVerifierconfig) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringVerifierconfig(r randyVerifierconfig) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneVerifierconfig(r)
	}
	return string(tmps)
}
func randUnrecognizedVerifierconfig(r randyVerifierconfig, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldVerifierconfig(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldVerifierconfig(data []byte, r randyVerifierconfig, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateVerifierconfig(data, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		data = encodeVarintPopulateVerifierconfig(data, uint64(v4))
	case 1:
		data = encodeVarintPopulateVerifierconfig(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateVerifierconfig(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateVerifierconfig(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateVerifierconfig(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateVerifierconfig(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (this *VerifierConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifierConfig{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`SigningKeyID:` + fmt.Sprintf("%v", this.SigningKeyID) + `,`,
		`Realm:` + fmt.Sprintf("%v", this.Realm) + `,`,
		`TLS:` + strings.Replace(fmt.Sprintf("%v", this.TLS), "TLSConfig", "TLSConfig", 1) + `,`,
		`KeyserverAddr:` + fmt.Sprintf("%v", this.KeyserverAddr) + `,`,
		`InitialKeyserverAuth:` + strings.Replace(strings.Replace(this.InitialKeyserverAuth.String(), "AuthorizationPolicy", "AuthorizationPolicy", 1), `&`, ``, 1) + `,`,
		`TreeNonce:` + fmt.Sprintf("%v", this.TreeNonce) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVerifierconfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
