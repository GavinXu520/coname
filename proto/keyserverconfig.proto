// Copyright 2014-2015 The Dename Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

syntax = "proto3";
package proto;
import "gogoproto/gogo.proto";
import "tlsconfig.proto";
import "duration.proto";
import "client.proto";

// ReplicaConfig contains the local configuration of a single replica of a
// keyserver. It is valid to have just one replica, but a larger odd number is
// desirable for availability.
message ReplicaConfig {
	KeyserverConfig keyserver_config = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

	// ReplicaID is a globally unique identifier. See Replica.ID.
	uint64 replica_id = 2 [(gogoproto.customname) = "ReplicaID"];
	string signing_key_id = 3 [(gogoproto.customname) = "SigningKeyID"];

	// The following fields describe how this particular replica should accept
	// requests from the network.

	string public_addr = 4;
	TLSConfig public_tls = 5 [(gogoproto.customname) = "PublicTLS"];
	string verifier_addr = 6;
	TLSConfig verifier_tls = 7 [(gogoproto.customname) = "VerifierTLS"];
	string hkp_addr = 8 [(gogoproto.customname) = "HKPAddr"];
	TLSConfig hkp_tls = 9 [(gogoproto.customname) = "HKPTLS"];
	string raft_addr = 10;
	TLSConfig raft_tls = 11 [(gogoproto.customname) = "RaftTLS"];

	string leveldb_path = 12 [(gogoproto.customname) = "LevelDBPath"];
	Duration raft_heartbeat = 13;
}

// KeyserverConfig describes the keyserver-wide configuration. All replicas
// MUST use the same KeyserverConfig.
message KeyserverConfig {
	uint64 server_id = 1 [(gogoproto.customname) = "ServerID"];
	string realm = 2;
	string vrf_key_id = 3 [(gogoproto.customname) = "VRFKeyID"];

	Duration min_epoch_interval = 4 [(gogoproto.nullable) = false];
	Duration max_epoch_interval = 5 [(gogoproto.nullable) = false];
	Duration proposal_retry_interval = 6 [(gogoproto.nullable) = false];

	// InitialReplicas contains the cluster configuration at the beginning of
	// time. It MUST NOT be modified ever after, and it MUST be the same for
	// all replicas. Use AddReplica and RemoveReplica to change the current
	// cluster configuration.
	repeated Replica initial_replicas = 7;

	string email_proof_to_addr = 8;
	string email_proof_subject_prefix = 9;
}

message Replica {
	// Id is used to distinguish between nodes during consistent replication.
	// All node ID-s MUST be unique, MUST NOT be reused (e.g., using IP-s or
	// hostnames is probably a bad idea) and SHOULD be set to the ID of the
	// first public key by convention.
	uint64 id = 1 [(gogoproto.customname) = "ID"];
	// PublicKeys lists the public keys of a node, to be joined using a
	// 1-out-of-n policy. The order of this list is NOT preserved.
	repeated PublicKey public_keys = 2;
	// RaftAddr is the Raft network address of the node, such that
	// net.Dial("tcp", Addr) reaches the node. Supported formats include
	// host.domain:port and ip:port.
	string raft_addr = 3;
}
