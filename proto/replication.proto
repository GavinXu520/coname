syntax = "proto3";
package proto;
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "client.proto";

// KeyserverStep denotes the input to a single step of the keyserver state
// machine. Linearizable high-availability replication is achieved by
// replicating an in-order log of all steps and having each replica reproduce
// the state from them.
message KeyserverStep {
	// TODO: should all fields in a oneof have their own types for extensibility?
	oneof type {
		// update is appended to the log when it is received from a client and
		// has passed pre-validation. However, since pre-validation is not
		// final, "success" should not be returned to the client until after the
		// update has been applied and ratified.
		// update is applied to the keyserver state as soon as it has been
		// committed to the log.
		SignedEntryUpdate update = 1;
		// epoch_delimiter is appended to the log by a leader (not necessarily
		// unique) node when at least the duration EPOCH_INTERVAL_MIN and at
		// most EPOCH_INTERVAL_MAX after the previous epoch_delimiter has passed.
		// Between these times, an epoch delimiter is appended as soon as an
		// update is committed.
		// As the leader requirement for appending an epoch_delimiter is soft,
		// it may happen that an epoch delimiter with a epoch number not higher
		// than the previous gets committed to the log. It must be ignored.
		EpochDelimiter epoch_delimiter = 2;
		// replica_ratification for the last epoch is appended to the log
		// when the epoch_delimiter is committed.
		// After some majority of the replicas has ratified the state, their
		// signatures make up the keyserver signature. As combining signatures
		// is deterministic, no new log entry is appended to record that.
		SignedRatification replica_ratification = 3;
		// verifier_ratification is appended for each new ratification received
		// from a verifier; these are used to provide proof of verification to
		// clients.
		SignedRatification verifier_ratification = 4;
	}
	message EpochDelimiter {
		uint64 epoch_number = 1;
		uint64 time = 2;
	}
}
