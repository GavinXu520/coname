// Code generated by protoc-gen-gogo.
// source: tlsconfig.proto
// DO NOT EDIT!

package proto

// discarding unused import gogoproto "gogoproto"

import strconv "strconv"

import fmt "fmt"
import bytes "bytes"

import strings "strings"
import github_com_andres_erbsen_protobuf_proto "github.com/andres-erbsen/protobuf/proto"
import sort "sort"
import reflect "reflect"

type TLSVersion int32

const (
	TLSVersion_UNSPECIFIED TLSVersion = 0
	VERSION_SSL30          TLSVersion = 768
	VERSION_TLS10          TLSVersion = 769
	VERSION_TLS11          TLSVersion = 770
	VERSION_TLS12          TLSVersion = 771
)

var TLSVersion_name = map[int32]string{
	0:   "TLSVersion_UNSPECIFIED",
	768: "VERSION_SSL30",
	769: "VERSION_TLS10",
	770: "VERSION_TLS11",
	771: "VERSION_TLS12",
}
var TLSVersion_value = map[string]int32{
	"TLSVersion_UNSPECIFIED": 0,
	"VERSION_SSL30":          768,
	"VERSION_TLS10":          769,
	"VERSION_TLS11":          770,
	"VERSION_TLS12":          771,
}

type ClientAuthType int32

const (
	NO_CLIENT_CERT                 ClientAuthType = 0
	REQUEST_CLIENT_CERT            ClientAuthType = 1
	REQUIRE_ANY_CLIENT_CERT        ClientAuthType = 2
	VERIFY_CLIENT_CERT_IF_GIVEN    ClientAuthType = 3
	REQUIRE_AND_VERIFY_CLIENT_CERT ClientAuthType = 4
)

var ClientAuthType_name = map[int32]string{
	0: "NO_CLIENT_CERT",
	1: "REQUEST_CLIENT_CERT",
	2: "REQUIRE_ANY_CLIENT_CERT",
	3: "VERIFY_CLIENT_CERT_IF_GIVEN",
	4: "REQUIRE_AND_VERIFY_CLIENT_CERT",
}
var ClientAuthType_value = map[string]int32{
	"NO_CLIENT_CERT":                 0,
	"REQUEST_CLIENT_CERT":            1,
	"REQUIRE_ANY_CLIENT_CERT":        2,
	"VERIFY_CLIENT_CERT_IF_GIVEN":    3,
	"REQUIRE_AND_VERIFY_CLIENT_CERT": 4,
}

type CipherSuite int32

const (
	CipherSuite_UNSPECIFIED                 CipherSuite = 0
	TLS_RSA_WITH_RC4_128_SHA                CipherSuite = 5
	TLS_RSA_WITH_3DES_EDE_CBC_SHA           CipherSuite = 10
	TLS_RSA_WITH_AES_128_CBC_SHA            CipherSuite = 47
	TLS_RSA_WITH_AES_256_CBC_SHA            CipherSuite = 53
	TLS_ECDHE_ECDSA_WITH_RC4_128_SHA        CipherSuite = 49159
	TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA    CipherSuite = 49161
	TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA    CipherSuite = 49162
	TLS_ECDHE_RSA_WITH_RC4_128_SHA          CipherSuite = 49169
	TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA     CipherSuite = 49170
	TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA      CipherSuite = 49171
	TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA      CipherSuite = 49172
	TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256   CipherSuite = 49199
	TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 CipherSuite = 49195
	TLS_FALLBACK_SCSV                       CipherSuite = 22016
)

var CipherSuite_name = map[int32]string{
	0:     "CipherSuite_UNSPECIFIED",
	5:     "TLS_RSA_WITH_RC4_128_SHA",
	10:    "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
	47:    "TLS_RSA_WITH_AES_128_CBC_SHA",
	53:    "TLS_RSA_WITH_AES_256_CBC_SHA",
	49159: "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA",
	49161: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
	49162: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
	49169: "TLS_ECDHE_RSA_WITH_RC4_128_SHA",
	49170: "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA",
	49171: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
	49172: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
	49199: "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
	49195: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
	22016: "TLS_FALLBACK_SCSV",
}
var CipherSuite_value = map[string]int32{
	"CipherSuite_UNSPECIFIED":                 0,
	"TLS_RSA_WITH_RC4_128_SHA":                5,
	"TLS_RSA_WITH_3DES_EDE_CBC_SHA":           10,
	"TLS_RSA_WITH_AES_128_CBC_SHA":            47,
	"TLS_RSA_WITH_AES_256_CBC_SHA":            53,
	"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA":        49159,
	"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA":    49161,
	"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA":    49162,
	"TLS_ECDHE_RSA_WITH_RC4_128_SHA":          49169,
	"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA":     49170,
	"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA":      49171,
	"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA":      49172,
	"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256":   49199,
	"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256": 49195,
	"TLS_FALLBACK_SCSV":                       22016,
}

type CurveID int32

const (
	CurveID_UNSPECIFIED CurveID = 0
	P256                CurveID = 23
	P384                CurveID = 24
	P521                CurveID = 25
)

var CurveID_name = map[int32]string{
	0:  "CurveID_UNSPECIFIED",
	23: "P256",
	24: "P384",
	25: "P521",
}
var CurveID_value = map[string]int32{
	"CurveID_UNSPECIFIED": 0,
	"P256":                23,
	"P384":                24,
	"P521":                25,
}

// TLSConfig structure is used to configure a TLS client or server.
type TLSConfig struct {
	// Certificates contains one or more certificate chains
	// to present to the other side of the connection.
	// Server configurations must include at least one certificate.
	Certificates []*CertificateAndKeyID `protobuf:"bytes,1,rep,name=certificates" json:"certificates,omitempty"`
	// RootCAs defines the set of root certificate authorities
	// that clients use when verifying server certificates.
	// If RootCAs is nil, TLS uses the host's root CA set.
	// The certificates are expected in DER format.
	RootCAs [][]byte `protobuf:"bytes,3,rep,name=root_cas" json:"root_cas,omitempty"`
	// NextProtos is a list of supported, application level protocols.
	NextProtos []string `protobuf:"bytes,4,rep,name=next_protos" json:"next_protos,omitempty"`
	// ServerName is used to verify the hostname on the returned
	// certificates. It is also included in the client's handshake to support
	// virtual hosting.
	ServerName string `protobuf:"bytes,5,opt,name=server_name,proto3" json:"server_name,omitempty"`
	// ClientAuth determines the server's policy for
	// TLS Client Authentication. The default is NoClientCert.
	ClientAuth ClientAuthType `protobuf:"varint,6,opt,name=client_auth,proto3,enum=proto.ClientAuthType" json:"client_auth,omitempty"`
	// ClientCAs defines the set of root certificate authorities that servers
	// use if required to verify a client certificate by the policy in
	// ClientAuth. The certificates are expected in DER format.
	ClientCAs [][]byte `protobuf:"bytes,7,rep,name=client_cas" json:"client_cas,omitempty"`
	// CipherSuites is a list of supported cipher suites. If CipherSuites
	// is nil, TLS uses a list of suites supported by the implementation.
	CipherSuites []CipherSuite `protobuf:"varint,8,rep,name=cipher_suites,enum=proto.CipherSuite" json:"cipher_suites,omitempty"`
	// PreferServerCipherSuites controls whether the server selects the
	// client's most preferred ciphersuite, or the server's most preferred
	// ciphersuite. If true then the server's preference, as expressed in
	// the order of elements in CipherSuites, is used.
	PreferServerCipherSuites bool `protobuf:"varint,9,opt,name=prefer_server_cipher_suites,proto3" json:"prefer_server_cipher_suites,omitempty"`
	// SessionTicketsEnabled may be set to true to enable session ticket
	// (resumption) support. Enabling session tickets limits forward secrecy to
	// until after the lifetime of the session ticket key (which, by default,
	// lives as long as the server process).
	SessionTicketsEnabled bool `protobuf:"varint,10,opt,name=session_tickets_enabled,proto3" json:"session_tickets_enabled,omitempty"`
	// SessionTicketKey (32 bytes) is used by TLS servers to provide session
	// resumption. See RFC 5077. If zero, it will be filled with random data
	// before the first server handshake.
	//
	// If multiple servers are terminating connections for the same host
	// they should all have the same SessionTicketKey. If the
	// SessionTicketKey leaks, previously recorded and future TLS
	// connections using that key are compromised.
	SessionTicketKeyID string `protobuf:"bytes,11,opt,name=session_ticket_key_id,proto3" json:"session_ticket_key_id,omitempty"`
	// MinVersion contains the minimum SSL/TLS version that is acceptable.
	// If zero, then SSLv3 is taken as the minimum.
	MinVersion TLSVersion `protobuf:"varint,12,opt,name=min_version,proto3,enum=proto.TLSVersion" json:"min_version,omitempty"`
	// MaxVersion contains the maximum SSL/TLS version that is acceptable.
	// If zero, then the maximum version supported by this package is used,
	// which is currently TLS 1.2.
	MaxVersion TLSVersion `protobuf:"varint,13,opt,name=max_version,proto3,enum=proto.TLSVersion" json:"max_version,omitempty"`
	// CurvePreferences contains the elliptic curves that will be used in
	// an ECDHE handshake, in preference order. If empty, the default will
	// be used.
	CurvePreferences []CurveID `protobuf:"varint,14,rep,name=curve_preferences,enum=proto.CurveID" json:"curve_preferences,omitempty"`
}

func (m *TLSConfig) Reset()      { *m = TLSConfig{} }
func (*TLSConfig) ProtoMessage() {}

func (m *TLSConfig) GetCertificates() []*CertificateAndKeyID {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type CertificateAndKeyID struct {
	// Certificate contains the public certificates in DER format, leaf first.
	Certificate [][]byte `protobuf:"bytes,1,rep,name=certificate" json:"certificate,omitempty"`
	KeyID       string   `protobuf:"bytes,2,opt,name=key_id,proto3" json:"key_id,omitempty"`
	OCSPStaple  []byte   `protobuf:"bytes,3,opt,name=OCSP_staple,proto3" json:"OCSP_staple,omitempty"`
}

func (m *CertificateAndKeyID) Reset()      { *m = CertificateAndKeyID{} }
func (*CertificateAndKeyID) ProtoMessage() {}

func init() {
	github_com_andres_erbsen_protobuf_proto.RegisterEnum("proto.TLSVersion", TLSVersion_name, TLSVersion_value)
	github_com_andres_erbsen_protobuf_proto.RegisterEnum("proto.ClientAuthType", ClientAuthType_name, ClientAuthType_value)
	github_com_andres_erbsen_protobuf_proto.RegisterEnum("proto.CipherSuite", CipherSuite_name, CipherSuite_value)
	github_com_andres_erbsen_protobuf_proto.RegisterEnum("proto.CurveID", CurveID_name, CurveID_value)
}
func (x TLSVersion) String() string {
	s, ok := TLSVersion_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ClientAuthType) String() string {
	s, ok := ClientAuthType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CipherSuite) String() string {
	s, ok := CipherSuite_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CurveID) String() string {
	s, ok := CurveID_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TLSConfig) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TLSConfig)
	if !ok {
		return fmt.Errorf("that is not of type *TLSConfig")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TLSConfig but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TLSConfigbut is not nil && this == nil")
	}
	if len(this.Certificates) != len(that1.Certificates) {
		return fmt.Errorf("Certificates this(%v) Not Equal that(%v)", len(this.Certificates), len(that1.Certificates))
	}
	for i := range this.Certificates {
		if !this.Certificates[i].Equal(that1.Certificates[i]) {
			return fmt.Errorf("Certificates this[%v](%v) Not Equal that[%v](%v)", i, this.Certificates[i], i, that1.Certificates[i])
		}
	}
	if len(this.RootCAs) != len(that1.RootCAs) {
		return fmt.Errorf("RootCAs this(%v) Not Equal that(%v)", len(this.RootCAs), len(that1.RootCAs))
	}
	for i := range this.RootCAs {
		if !bytes.Equal(this.RootCAs[i], that1.RootCAs[i]) {
			return fmt.Errorf("RootCAs this[%v](%v) Not Equal that[%v](%v)", i, this.RootCAs[i], i, that1.RootCAs[i])
		}
	}
	if len(this.NextProtos) != len(that1.NextProtos) {
		return fmt.Errorf("NextProtos this(%v) Not Equal that(%v)", len(this.NextProtos), len(that1.NextProtos))
	}
	for i := range this.NextProtos {
		if this.NextProtos[i] != that1.NextProtos[i] {
			return fmt.Errorf("NextProtos this[%v](%v) Not Equal that[%v](%v)", i, this.NextProtos[i], i, that1.NextProtos[i])
		}
	}
	if this.ServerName != that1.ServerName {
		return fmt.Errorf("ServerName this(%v) Not Equal that(%v)", this.ServerName, that1.ServerName)
	}
	if this.ClientAuth != that1.ClientAuth {
		return fmt.Errorf("ClientAuth this(%v) Not Equal that(%v)", this.ClientAuth, that1.ClientAuth)
	}
	if len(this.ClientCAs) != len(that1.ClientCAs) {
		return fmt.Errorf("ClientCAs this(%v) Not Equal that(%v)", len(this.ClientCAs), len(that1.ClientCAs))
	}
	for i := range this.ClientCAs {
		if !bytes.Equal(this.ClientCAs[i], that1.ClientCAs[i]) {
			return fmt.Errorf("ClientCAs this[%v](%v) Not Equal that[%v](%v)", i, this.ClientCAs[i], i, that1.ClientCAs[i])
		}
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return fmt.Errorf("CipherSuites this(%v) Not Equal that(%v)", len(this.CipherSuites), len(that1.CipherSuites))
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return fmt.Errorf("CipherSuites this[%v](%v) Not Equal that[%v](%v)", i, this.CipherSuites[i], i, that1.CipherSuites[i])
		}
	}
	if this.PreferServerCipherSuites != that1.PreferServerCipherSuites {
		return fmt.Errorf("PreferServerCipherSuites this(%v) Not Equal that(%v)", this.PreferServerCipherSuites, that1.PreferServerCipherSuites)
	}
	if this.SessionTicketsEnabled != that1.SessionTicketsEnabled {
		return fmt.Errorf("SessionTicketsEnabled this(%v) Not Equal that(%v)", this.SessionTicketsEnabled, that1.SessionTicketsEnabled)
	}
	if this.SessionTicketKeyID != that1.SessionTicketKeyID {
		return fmt.Errorf("SessionTicketKeyID this(%v) Not Equal that(%v)", this.SessionTicketKeyID, that1.SessionTicketKeyID)
	}
	if this.MinVersion != that1.MinVersion {
		return fmt.Errorf("MinVersion this(%v) Not Equal that(%v)", this.MinVersion, that1.MinVersion)
	}
	if this.MaxVersion != that1.MaxVersion {
		return fmt.Errorf("MaxVersion this(%v) Not Equal that(%v)", this.MaxVersion, that1.MaxVersion)
	}
	if len(this.CurvePreferences) != len(that1.CurvePreferences) {
		return fmt.Errorf("CurvePreferences this(%v) Not Equal that(%v)", len(this.CurvePreferences), len(that1.CurvePreferences))
	}
	for i := range this.CurvePreferences {
		if this.CurvePreferences[i] != that1.CurvePreferences[i] {
			return fmt.Errorf("CurvePreferences this[%v](%v) Not Equal that[%v](%v)", i, this.CurvePreferences[i], i, that1.CurvePreferences[i])
		}
	}
	return nil
}
func (this *TLSConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TLSConfig)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Certificates) != len(that1.Certificates) {
		return false
	}
	for i := range this.Certificates {
		if !this.Certificates[i].Equal(that1.Certificates[i]) {
			return false
		}
	}
	if len(this.RootCAs) != len(that1.RootCAs) {
		return false
	}
	for i := range this.RootCAs {
		if !bytes.Equal(this.RootCAs[i], that1.RootCAs[i]) {
			return false
		}
	}
	if len(this.NextProtos) != len(that1.NextProtos) {
		return false
	}
	for i := range this.NextProtos {
		if this.NextProtos[i] != that1.NextProtos[i] {
			return false
		}
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	if this.ClientAuth != that1.ClientAuth {
		return false
	}
	if len(this.ClientCAs) != len(that1.ClientCAs) {
		return false
	}
	for i := range this.ClientCAs {
		if !bytes.Equal(this.ClientCAs[i], that1.ClientCAs[i]) {
			return false
		}
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	if this.PreferServerCipherSuites != that1.PreferServerCipherSuites {
		return false
	}
	if this.SessionTicketsEnabled != that1.SessionTicketsEnabled {
		return false
	}
	if this.SessionTicketKeyID != that1.SessionTicketKeyID {
		return false
	}
	if this.MinVersion != that1.MinVersion {
		return false
	}
	if this.MaxVersion != that1.MaxVersion {
		return false
	}
	if len(this.CurvePreferences) != len(that1.CurvePreferences) {
		return false
	}
	for i := range this.CurvePreferences {
		if this.CurvePreferences[i] != that1.CurvePreferences[i] {
			return false
		}
	}
	return true
}
func (this *CertificateAndKeyID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CertificateAndKeyID)
	if !ok {
		return fmt.Errorf("that is not of type *CertificateAndKeyID")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CertificateAndKeyID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CertificateAndKeyIDbut is not nil && this == nil")
	}
	if len(this.Certificate) != len(that1.Certificate) {
		return fmt.Errorf("Certificate this(%v) Not Equal that(%v)", len(this.Certificate), len(that1.Certificate))
	}
	for i := range this.Certificate {
		if !bytes.Equal(this.Certificate[i], that1.Certificate[i]) {
			return fmt.Errorf("Certificate this[%v](%v) Not Equal that[%v](%v)", i, this.Certificate[i], i, that1.Certificate[i])
		}
	}
	if this.KeyID != that1.KeyID {
		return fmt.Errorf("KeyID this(%v) Not Equal that(%v)", this.KeyID, that1.KeyID)
	}
	if !bytes.Equal(this.OCSPStaple, that1.OCSPStaple) {
		return fmt.Errorf("OCSPStaple this(%v) Not Equal that(%v)", this.OCSPStaple, that1.OCSPStaple)
	}
	return nil
}
func (this *CertificateAndKeyID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CertificateAndKeyID)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Certificate) != len(that1.Certificate) {
		return false
	}
	for i := range this.Certificate {
		if !bytes.Equal(this.Certificate[i], that1.Certificate[i]) {
			return false
		}
	}
	if this.KeyID != that1.KeyID {
		return false
	}
	if !bytes.Equal(this.OCSPStaple, that1.OCSPStaple) {
		return false
	}
	return true
}
func (this *TLSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&proto.TLSConfig{` +
		`Certificates:` + fmt.Sprintf("%#v", this.Certificates),
		`RootCAs:` + fmt.Sprintf("%#v", this.RootCAs),
		`NextProtos:` + fmt.Sprintf("%#v", this.NextProtos),
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName),
		`ClientAuth:` + fmt.Sprintf("%#v", this.ClientAuth),
		`ClientCAs:` + fmt.Sprintf("%#v", this.ClientCAs),
		`CipherSuites:` + fmt.Sprintf("%#v", this.CipherSuites),
		`PreferServerCipherSuites:` + fmt.Sprintf("%#v", this.PreferServerCipherSuites),
		`SessionTicketsEnabled:` + fmt.Sprintf("%#v", this.SessionTicketsEnabled),
		`SessionTicketKeyID:` + fmt.Sprintf("%#v", this.SessionTicketKeyID),
		`MinVersion:` + fmt.Sprintf("%#v", this.MinVersion),
		`MaxVersion:` + fmt.Sprintf("%#v", this.MaxVersion),
		`CurvePreferences:` + fmt.Sprintf("%#v", this.CurvePreferences) + `}`}, ", ")
	return s
}
func (this *CertificateAndKeyID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&proto.CertificateAndKeyID{` +
		`Certificate:` + fmt.Sprintf("%#v", this.Certificate),
		`KeyID:` + fmt.Sprintf("%#v", this.KeyID),
		`OCSPStaple:` + fmt.Sprintf("%#v", this.OCSPStaple) + `}`}, ", ")
	return s
}
func valueToGoStringTlsconfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringTlsconfig(e map[int32]github_com_andres_erbsen_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func NewPopulatedTLSConfig(r randyTlsconfig, easy bool) *TLSConfig {
	this := &TLSConfig{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.Certificates = make([]*CertificateAndKeyID, v1)
		for i := 0; i < v1; i++ {
			this.Certificates[i] = NewPopulatedCertificateAndKeyID(r, easy)
		}
	}
	v2 := r.Intn(100)
	this.RootCAs = make([][]byte, v2)
	for i := 0; i < v2; i++ {
		v3 := r.Intn(100)
		this.RootCAs[i] = make([]byte, v3)
		for j := 0; j < v3; j++ {
			this.RootCAs[i][j] = byte(r.Intn(256))
		}
	}
	v4 := r.Intn(10)
	this.NextProtos = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.NextProtos[i] = randStringTlsconfig(r)
	}
	this.ServerName = randStringTlsconfig(r)
	this.ClientAuth = ClientAuthType([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	v5 := r.Intn(100)
	this.ClientCAs = make([][]byte, v5)
	for i := 0; i < v5; i++ {
		v6 := r.Intn(100)
		this.ClientCAs[i] = make([]byte, v6)
		for j := 0; j < v6; j++ {
			this.ClientCAs[i][j] = byte(r.Intn(256))
		}
	}
	v7 := r.Intn(10)
	this.CipherSuites = make([]CipherSuite, v7)
	for i := 0; i < v7; i++ {
		this.CipherSuites[i] = CipherSuite([]int32{0, 5, 10, 47, 53, 49159, 49161, 49162, 49169, 49170, 49171, 49172, 49199, 49195, 22016}[r.Intn(15)])
	}
	this.PreferServerCipherSuites = bool(bool(r.Intn(2) == 0))
	this.SessionTicketsEnabled = bool(bool(r.Intn(2) == 0))
	this.SessionTicketKeyID = randStringTlsconfig(r)
	this.MinVersion = TLSVersion([]int32{0, 768, 769, 770, 771}[r.Intn(5)])
	this.MaxVersion = TLSVersion([]int32{0, 768, 769, 770, 771}[r.Intn(5)])
	v8 := r.Intn(10)
	this.CurvePreferences = make([]CurveID, v8)
	for i := 0; i < v8; i++ {
		this.CurvePreferences[i] = CurveID([]int32{0, 23, 24, 25}[r.Intn(4)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCertificateAndKeyID(r randyTlsconfig, easy bool) *CertificateAndKeyID {
	this := &CertificateAndKeyID{}
	v9 := r.Intn(100)
	this.Certificate = make([][]byte, v9)
	for i := 0; i < v9; i++ {
		v10 := r.Intn(100)
		this.Certificate[i] = make([]byte, v10)
		for j := 0; j < v10; j++ {
			this.Certificate[i][j] = byte(r.Intn(256))
		}
	}
	this.KeyID = randStringTlsconfig(r)
	v11 := r.Intn(100)
	this.OCSPStaple = make([]byte, v11)
	for i := 0; i < v11; i++ {
		this.OCSPStaple[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTlsconfig interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTlsconfig(r randyTlsconfig) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTlsconfig(r randyTlsconfig) string {
	v12 := r.Intn(100)
	tmps := make([]rune, v12)
	for i := 0; i < v12; i++ {
		tmps[i] = randUTF8RuneTlsconfig(r)
	}
	return string(tmps)
}
func randUnrecognizedTlsconfig(r randyTlsconfig, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTlsconfig(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTlsconfig(data []byte, r randyTlsconfig, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTlsconfig(data, uint64(key))
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		data = encodeVarintPopulateTlsconfig(data, uint64(v13))
	case 1:
		data = encodeVarintPopulateTlsconfig(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTlsconfig(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTlsconfig(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTlsconfig(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTlsconfig(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (this *TLSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfig{`,
		`Certificates:` + strings.Replace(fmt.Sprintf("%v", this.Certificates), "CertificateAndKeyID", "CertificateAndKeyID", 1) + `,`,
		`RootCAs:` + fmt.Sprintf("%v", this.RootCAs) + `,`,
		`NextProtos:` + fmt.Sprintf("%v", this.NextProtos) + `,`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`ClientAuth:` + fmt.Sprintf("%v", this.ClientAuth) + `,`,
		`ClientCAs:` + fmt.Sprintf("%v", this.ClientCAs) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`PreferServerCipherSuites:` + fmt.Sprintf("%v", this.PreferServerCipherSuites) + `,`,
		`SessionTicketsEnabled:` + fmt.Sprintf("%v", this.SessionTicketsEnabled) + `,`,
		`SessionTicketKeyID:` + fmt.Sprintf("%v", this.SessionTicketKeyID) + `,`,
		`MinVersion:` + fmt.Sprintf("%v", this.MinVersion) + `,`,
		`MaxVersion:` + fmt.Sprintf("%v", this.MaxVersion) + `,`,
		`CurvePreferences:` + fmt.Sprintf("%v", this.CurvePreferences) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CertificateAndKeyID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CertificateAndKeyID{`,
		`Certificate:` + fmt.Sprintf("%v", this.Certificate) + `,`,
		`KeyID:` + fmt.Sprintf("%v", this.KeyID) + `,`,
		`OCSPStaple:` + fmt.Sprintf("%v", this.OCSPStaple) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTlsconfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
