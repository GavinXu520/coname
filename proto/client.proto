// Copyright 2014-2015 The Dename Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

syntax = "proto3";
package proto;
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "timestamp.proto";

service E2EKSLookup {
	rpc LookupProfile(LookupProfileRequest) returns (LookupProof);
}
service E2EKSUpdate {
	rpc LookupProfile(LookupProfileRequest) returns (LookupProof); // TODO: do grpc interfaces support embedding/composition/inheritance?
	rpc UpdateProfile(SignedEntryUpdate) returns (LookupProof);
}

message LookupProfileRequest {
	string user_id = 1; // TODO: should we allow lookups by index?
	// quorum_requirement specifies which verifiers must have ratified the
	// result for it to be accepted. A server would fall back to an older
	// directory state if the ratifications of the latest one do not satisfy
	// the quourm requirement.
	QuorumExpr quorum_requirement = 2;
	// valid_at constrains the server to returning ratifications that will not
	// expire before valid_at. A client might set this to its current time plus
	// a lower bound of the round trip time to the server.
	Timestamp valid_at = 3
		[(gogoproto.customtype) = "Time", (gogoproto.nullable) = true];
}

// LookupProof encapsulates end-to-end cryptographc evidence that assuming *at
// least one* of the ratifiers has been correctly following the rules of the
// keyserver protocol then profile contains the latest public keys and metadata
// uploaded by user_id before the time specified in ratifications[0]. If any
// step of the proof does not check out, the contents of profile MUST NOT be
// used for any other purpose than debugging.
message LookupProof {
	string user_id = 1;
	// index proof gives an index idx, and shows that the index is a result of
	// applying a globally fixed bijection VRF to user_id: idx = VRF(user_ID).
	// If this proof checks out, we can safely continue by looking up the
	// keyserver entry corresponding to index to get the public key of user_id.
	bytes index_proof = 2;
	// ratifications contains signed directory state summaries for consecutive
	// epochs, starting with the one as of which the lookup was performed.
	// A single valid ratification r by a honest and correct verifier implies
	// that the r.ratification.summary.root_hash summarizes the authenticated
	// data structure containing the unique and correct mapping from indices to
	// entries as of epoch r.ratification.epoch at human time
	// r.ratification.timestamp.
	// The ratifications of the later epochs indirectly vouch for the first one
	// through directory state summary hash chaining. Only the latest valid
	// signature from each verifier is provided, so some returned ratifications
	// may have no signatures on them.
	repeated SignedRatification ratifications = 3;
	// tree_proof contains an authenticated data structure lookup trace,
	// arguing that in the data structure with hash
	// ratifications[0].ratification.summary.root_hash, the index from
	// index_proof maps to entry (which is given in the proof).
	bytes tree_proof = 4;
	// entry specifies profile by hash(profile) = entry.profile_hash
	Profile profile = 5;
}

// A user's profile, containing public keys and other information.
message Profile {
	bytes nonce = 1; // 16 bytes. no two honest profiles should hash the same
	repeated bytes email_pgp_publickey = 2; // non-ascii-armored public key packet
	// A new field will be added here for each application, with the TCP/UDP
	// port number as field number whenever possible to avoid collisions.
}

message Entry { // all fields required
	uint64 version = 1; // version is a non-decresing field that must start at 0 at registration
	SignatureVerifier update_key = 2; // signing key authorized to change the profile
	bytes profile_hash = 3; // the content fields ("profile") are only referenced by hash because they main contain private data
}

message SignedEntryUpdate {
	message EntryUpdateT {
		bytes index = 1; // VRF(name)
		Entry new_entry = 2 // hashed field, do not re-encode
			[(gogoproto.customtype) = "Entry_PreserveEncoding", (gogoproto.nullable) = false];
	}
	EntryUpdateT update = 1 // signed field, do not re-encode
		[(gogoproto.customtype) = "SignedEntryUpdate_EntryUpdateT_PreserveEncoding", (gogoproto.nullable) = false];
	bytes new_sig  = 2; // required: signature by an update key in new entry
	bytes old_sig = 3; // signature by an update key in old entry; required if old entry exists
	Profile profile = 4; // optional (required by service providers, not shown to verifiers)
}

// SignedRatification messages are used by auditors and the service provider to
// vouch that the SummaryHash represents the unique global state at the end of
// Epoch.
message SignedRatification {
	message RatificationT {
		string realm = 1; // (space context) fully-qualified domain name of the entity handling registrations
		uint64 epoch = 2; // (time context) sequence number
		message KeyserverStateSummary {
			bytes root_hash = 1;
			// Chaining is used to allow signatures from different epochs in the same quorum:
			// a signature vouches for all epochs chained to that in addition to the one listed.
			bytes previous_summary_hash = 2;
		}
		KeyserverStateSummary summary = 3 // hashed field, do not re-encode
			[(gogoproto.customtype) = "SignedRatification_RatificationT_KeyserverStateSummary_PreserveEncoding", (gogoproto.nullable) = false];
		Timestamp timestamp = 4
			[(gogoproto.customtype) = "Time", (gogoproto.nullable) = false];
	}
	uint64 ratifier = 1; // unique ID, hash of public key by convention
	RatificationT ratification = 2 // signed field, do not re-encode
			[(gogoproto.customtype) = "SignedRatification_RatificationT_PreserveEncoding", (gogoproto.nullable) = false];
	bytes signature = 3;
}

// SignatureVerifier wraps a public key of a cryptographically secure signature
// scheme and verification metadata. Each verifier can have its own signature
// format and needs to implement serialization and deserialization of its own
// signatures.
message SignatureVerifier {
	// ThresholdVerifiers returns "OK" if any threshould of verifers do.
	// This is used to implement
	// 1. Account Recovery through service provider: if an user's entry
	// contains has the update key set to
	// threshold(1,user,serviceprovider), the service provider can perform
	// account recovery.
	// 2. Service providers with servers in geographically diverse locations,
	// for example threshold(2,freedonia,gilead,mordor).
	message ThresholdVerifier {
		uint32 threshold = 1; // required
		repeated SignatureVerifier verifiers = 2;
	}

	oneof verification_method {
		bytes ed25519 = 1; // 32 bytes (<http://ed25519.cr.yp.to/>)
		ThresholdVerifier threshold = 2;
	}

	// TODO: time-restricted signature delegation a la TOR dirauths?
	// This would make running a server without HSM significantly safer
}

// Unlike cryptographic anonymous threshold signatures, the signature
// simply contains the signatures from the specified keys.
message ThresholdSignature {
	repeated uint32 key_index = 1;
	repeated bytes signature = 2;
}

// QuorumExpr represents a function with type set<uint64> -> bool.  An
// expression evaluates to true given args iff the sum of the following two
// numbers is at least threshold:
// a) number of entries in verifiers that are in args
// b) number of subexpressions that evaluate to true
// note: expr.eval(a) \wedge expr.eval(b) -> expr.eval(a \cup b)
message QuorumExpr {
	uint32 threshold = 1; // required
	repeated uint64 verifiers = 2;
	repeated QuorumExpr subexpressions = 3;
}
