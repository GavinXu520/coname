// Code generated by protoc-gen-gogo.
// source: keyserverconfig.proto
// DO NOT EDIT!

package proto

// discarding unused import gogoproto "gogoproto"

import fmt "fmt"

import strings "strings"
import github_com_andres_erbsen_protobuf_proto "github.com/andres-erbsen/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import io "io"

type ReplicaConfig struct {
	KeyserverConfig `protobuf:"bytes,1,opt,name=keyserver_config,embedded=keyserver_config" json:"keyserver_config"`
	ReplicaID       uint64 `protobuf:"varint,2,opt,name=replica_id,proto3" json:"replica_id,omitempty"`
	SigningKeyID    string `protobuf:"bytes,3,opt,name=signing_key_id,proto3" json:"signing_key_id,omitempty"`
	// server-side listening
	UpdateAddr   string     `protobuf:"bytes,4,opt,name=update_addr,proto3" json:"update_addr,omitempty"`
	UpdateTLS    *TLSConfig `protobuf:"bytes,5,opt,name=update_tls" json:"update_tls,omitempty"`
	LookupAddr   string     `protobuf:"bytes,6,opt,name=lookup_addr,proto3" json:"lookup_addr,omitempty"`
	LookupTLS    *TLSConfig `protobuf:"bytes,7,opt,name=lookup_tls" json:"lookup_tls,omitempty"`
	VerifierAddr string     `protobuf:"bytes,8,opt,name=verifier_addr,proto3" json:"verifier_addr,omitempty"`
	VerifierTLS  *TLSConfig `protobuf:"bytes,9,opt,name=verifier_tls" json:"verifier_tls,omitempty"`
	HKPAddr      string     `protobuf:"bytes,10,opt,name=hkp_addr,proto3" json:"hkp_addr,omitempty"`
	HKPTLS       *TLSConfig `protobuf:"bytes,11,opt,name=hkp_tls" json:"hkp_tls,omitempty"`
}

func (m *ReplicaConfig) Reset()      { *m = ReplicaConfig{} }
func (*ReplicaConfig) ProtoMessage() {}

func (m *ReplicaConfig) GetUpdateTLS() *TLSConfig {
	if m != nil {
		return m.UpdateTLS
	}
	return nil
}

func (m *ReplicaConfig) GetLookupTLS() *TLSConfig {
	if m != nil {
		return m.LookupTLS
	}
	return nil
}

func (m *ReplicaConfig) GetVerifierTLS() *TLSConfig {
	if m != nil {
		return m.VerifierTLS
	}
	return nil
}

func (m *ReplicaConfig) GetHKPTLS() *TLSConfig {
	if m != nil {
		return m.HKPTLS
	}
	return nil
}

type KeyserverConfig struct {
	ServerID              uint64   `protobuf:"varint,1,opt,name=server_id,proto3" json:"server_id,omitempty"`
	Realm                 string   `protobuf:"bytes,2,opt,name=realm,proto3" json:"realm,omitempty"`
	VRFKeyID              string   `protobuf:"bytes,3,opt,name=vrf_key_id,proto3" json:"vrf_key_id,omitempty"`
	MinEpochInterval      Duration `protobuf:"bytes,4,opt,name=min_epoch_interval" json:"min_epoch_interval"`
	MaxEpochInterval      Duration `protobuf:"bytes,5,opt,name=max_epoch_interval" json:"max_epoch_interval"`
	ProposalRetryInterval Duration `protobuf:"bytes,6,opt,name=proposal_retry_interval" json:"proposal_retry_interval"`
}

func (m *KeyserverConfig) Reset()      { *m = KeyserverConfig{} }
func (*KeyserverConfig) ProtoMessage() {}

func (m *KeyserverConfig) GetMinEpochInterval() Duration {
	if m != nil {
		return m.MinEpochInterval
	}
	return Duration{}
}

func (m *KeyserverConfig) GetMaxEpochInterval() Duration {
	if m != nil {
		return m.MaxEpochInterval
	}
	return Duration{}
}

func (m *KeyserverConfig) GetProposalRetryInterval() Duration {
	if m != nil {
		return m.ProposalRetryInterval
	}
	return Duration{}
}

func (this *ReplicaConfig) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ReplicaConfig)
	if !ok {
		return fmt.Errorf("that is not of type *ReplicaConfig")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ReplicaConfig but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ReplicaConfigbut is not nil && this == nil")
	}
	if !this.KeyserverConfig.Equal(&that1.KeyserverConfig) {
		return fmt.Errorf("KeyserverConfig this(%v) Not Equal that(%v)", this.KeyserverConfig, that1.KeyserverConfig)
	}
	if this.ReplicaID != that1.ReplicaID {
		return fmt.Errorf("ReplicaID this(%v) Not Equal that(%v)", this.ReplicaID, that1.ReplicaID)
	}
	if this.SigningKeyID != that1.SigningKeyID {
		return fmt.Errorf("SigningKeyID this(%v) Not Equal that(%v)", this.SigningKeyID, that1.SigningKeyID)
	}
	if this.UpdateAddr != that1.UpdateAddr {
		return fmt.Errorf("UpdateAddr this(%v) Not Equal that(%v)", this.UpdateAddr, that1.UpdateAddr)
	}
	if !this.UpdateTLS.Equal(that1.UpdateTLS) {
		return fmt.Errorf("UpdateTLS this(%v) Not Equal that(%v)", this.UpdateTLS, that1.UpdateTLS)
	}
	if this.LookupAddr != that1.LookupAddr {
		return fmt.Errorf("LookupAddr this(%v) Not Equal that(%v)", this.LookupAddr, that1.LookupAddr)
	}
	if !this.LookupTLS.Equal(that1.LookupTLS) {
		return fmt.Errorf("LookupTLS this(%v) Not Equal that(%v)", this.LookupTLS, that1.LookupTLS)
	}
	if this.VerifierAddr != that1.VerifierAddr {
		return fmt.Errorf("VerifierAddr this(%v) Not Equal that(%v)", this.VerifierAddr, that1.VerifierAddr)
	}
	if !this.VerifierTLS.Equal(that1.VerifierTLS) {
		return fmt.Errorf("VerifierTLS this(%v) Not Equal that(%v)", this.VerifierTLS, that1.VerifierTLS)
	}
	if this.HKPAddr != that1.HKPAddr {
		return fmt.Errorf("HKPAddr this(%v) Not Equal that(%v)", this.HKPAddr, that1.HKPAddr)
	}
	if !this.HKPTLS.Equal(that1.HKPTLS) {
		return fmt.Errorf("HKPTLS this(%v) Not Equal that(%v)", this.HKPTLS, that1.HKPTLS)
	}
	return nil
}
func (this *ReplicaConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReplicaConfig)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.KeyserverConfig.Equal(&that1.KeyserverConfig) {
		return false
	}
	if this.ReplicaID != that1.ReplicaID {
		return false
	}
	if this.SigningKeyID != that1.SigningKeyID {
		return false
	}
	if this.UpdateAddr != that1.UpdateAddr {
		return false
	}
	if !this.UpdateTLS.Equal(that1.UpdateTLS) {
		return false
	}
	if this.LookupAddr != that1.LookupAddr {
		return false
	}
	if !this.LookupTLS.Equal(that1.LookupTLS) {
		return false
	}
	if this.VerifierAddr != that1.VerifierAddr {
		return false
	}
	if !this.VerifierTLS.Equal(that1.VerifierTLS) {
		return false
	}
	if this.HKPAddr != that1.HKPAddr {
		return false
	}
	if !this.HKPTLS.Equal(that1.HKPTLS) {
		return false
	}
	return true
}
func (this *KeyserverConfig) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*KeyserverConfig)
	if !ok {
		return fmt.Errorf("that is not of type *KeyserverConfig")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *KeyserverConfig but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *KeyserverConfigbut is not nil && this == nil")
	}
	if this.ServerID != that1.ServerID {
		return fmt.Errorf("ServerID this(%v) Not Equal that(%v)", this.ServerID, that1.ServerID)
	}
	if this.Realm != that1.Realm {
		return fmt.Errorf("Realm this(%v) Not Equal that(%v)", this.Realm, that1.Realm)
	}
	if this.VRFKeyID != that1.VRFKeyID {
		return fmt.Errorf("VRFKeyID this(%v) Not Equal that(%v)", this.VRFKeyID, that1.VRFKeyID)
	}
	if !this.MinEpochInterval.Equal(&that1.MinEpochInterval) {
		return fmt.Errorf("MinEpochInterval this(%v) Not Equal that(%v)", this.MinEpochInterval, that1.MinEpochInterval)
	}
	if !this.MaxEpochInterval.Equal(&that1.MaxEpochInterval) {
		return fmt.Errorf("MaxEpochInterval this(%v) Not Equal that(%v)", this.MaxEpochInterval, that1.MaxEpochInterval)
	}
	if !this.ProposalRetryInterval.Equal(&that1.ProposalRetryInterval) {
		return fmt.Errorf("ProposalRetryInterval this(%v) Not Equal that(%v)", this.ProposalRetryInterval, that1.ProposalRetryInterval)
	}
	return nil
}
func (this *KeyserverConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*KeyserverConfig)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ServerID != that1.ServerID {
		return false
	}
	if this.Realm != that1.Realm {
		return false
	}
	if this.VRFKeyID != that1.VRFKeyID {
		return false
	}
	if !this.MinEpochInterval.Equal(&that1.MinEpochInterval) {
		return false
	}
	if !this.MaxEpochInterval.Equal(&that1.MaxEpochInterval) {
		return false
	}
	if !this.ProposalRetryInterval.Equal(&that1.ProposalRetryInterval) {
		return false
	}
	return true
}
func (this *ReplicaConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&proto.ReplicaConfig{` +
		`KeyserverConfig:` + strings.Replace(this.KeyserverConfig.GoString(), `&`, ``, 1),
		`ReplicaID:` + fmt.Sprintf("%#v", this.ReplicaID),
		`SigningKeyID:` + fmt.Sprintf("%#v", this.SigningKeyID),
		`UpdateAddr:` + fmt.Sprintf("%#v", this.UpdateAddr),
		`UpdateTLS:` + fmt.Sprintf("%#v", this.UpdateTLS),
		`LookupAddr:` + fmt.Sprintf("%#v", this.LookupAddr),
		`LookupTLS:` + fmt.Sprintf("%#v", this.LookupTLS),
		`VerifierAddr:` + fmt.Sprintf("%#v", this.VerifierAddr),
		`VerifierTLS:` + fmt.Sprintf("%#v", this.VerifierTLS),
		`HKPAddr:` + fmt.Sprintf("%#v", this.HKPAddr),
		`HKPTLS:` + fmt.Sprintf("%#v", this.HKPTLS) + `}`}, ", ")
	return s
}
func (this *KeyserverConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&proto.KeyserverConfig{` +
		`ServerID:` + fmt.Sprintf("%#v", this.ServerID),
		`Realm:` + fmt.Sprintf("%#v", this.Realm),
		`VRFKeyID:` + fmt.Sprintf("%#v", this.VRFKeyID),
		`MinEpochInterval:` + strings.Replace(this.MinEpochInterval.GoString(), `&`, ``, 1),
		`MaxEpochInterval:` + strings.Replace(this.MaxEpochInterval.GoString(), `&`, ``, 1),
		`ProposalRetryInterval:` + strings.Replace(this.ProposalRetryInterval.GoString(), `&`, ``, 1) + `}`}, ", ")
	return s
}
func valueToGoStringKeyserverconfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringKeyserverconfig(e map[int32]github_com_andres_erbsen_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func (m *ReplicaConfig) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReplicaConfig) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintKeyserverconfig(data, i, uint64(m.KeyserverConfig.Size()))
	n1, err := m.KeyserverConfig.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.ReplicaID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(m.ReplicaID))
	}
	if len(m.SigningKeyID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(len(m.SigningKeyID)))
		i += copy(data[i:], m.SigningKeyID)
	}
	if len(m.UpdateAddr) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(len(m.UpdateAddr)))
		i += copy(data[i:], m.UpdateAddr)
	}
	if m.UpdateTLS != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(m.UpdateTLS.Size()))
		n2, err := m.UpdateTLS.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.LookupAddr) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(len(m.LookupAddr)))
		i += copy(data[i:], m.LookupAddr)
	}
	if m.LookupTLS != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(m.LookupTLS.Size()))
		n3, err := m.LookupTLS.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.VerifierAddr) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(len(m.VerifierAddr)))
		i += copy(data[i:], m.VerifierAddr)
	}
	if m.VerifierTLS != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(m.VerifierTLS.Size()))
		n4, err := m.VerifierTLS.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.HKPAddr) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(len(m.HKPAddr)))
		i += copy(data[i:], m.HKPAddr)
	}
	if m.HKPTLS != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(m.HKPTLS.Size()))
		n5, err := m.HKPTLS.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *KeyserverConfig) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *KeyserverConfig) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServerID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(m.ServerID))
	}
	if len(m.Realm) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(len(m.Realm)))
		i += copy(data[i:], m.Realm)
	}
	if len(m.VRFKeyID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintKeyserverconfig(data, i, uint64(len(m.VRFKeyID)))
		i += copy(data[i:], m.VRFKeyID)
	}
	data[i] = 0x22
	i++
	i = encodeVarintKeyserverconfig(data, i, uint64(m.MinEpochInterval.Size()))
	n6, err := m.MinEpochInterval.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	data[i] = 0x2a
	i++
	i = encodeVarintKeyserverconfig(data, i, uint64(m.MaxEpochInterval.Size()))
	n7, err := m.MaxEpochInterval.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	data[i] = 0x32
	i++
	i = encodeVarintKeyserverconfig(data, i, uint64(m.ProposalRetryInterval.Size()))
	n8, err := m.ProposalRetryInterval.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func encodeFixed64Keyserverconfig(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Keyserverconfig(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintKeyserverconfig(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedReplicaConfig(r randyKeyserverconfig, easy bool) *ReplicaConfig {
	this := &ReplicaConfig{}
	v1 := NewPopulatedKeyserverConfig(r, easy)
	this.KeyserverConfig = *v1
	this.ReplicaID = uint64(uint64(r.Uint32()))
	this.SigningKeyID = randStringKeyserverconfig(r)
	this.UpdateAddr = randStringKeyserverconfig(r)
	if r.Intn(10) != 0 {
		this.UpdateTLS = NewPopulatedTLSConfig(r, easy)
	}
	this.LookupAddr = randStringKeyserverconfig(r)
	if r.Intn(10) != 0 {
		this.LookupTLS = NewPopulatedTLSConfig(r, easy)
	}
	this.VerifierAddr = randStringKeyserverconfig(r)
	if r.Intn(10) != 0 {
		this.VerifierTLS = NewPopulatedTLSConfig(r, easy)
	}
	this.HKPAddr = randStringKeyserverconfig(r)
	if r.Intn(10) != 0 {
		this.HKPTLS = NewPopulatedTLSConfig(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKeyserverConfig(r randyKeyserverconfig, easy bool) *KeyserverConfig {
	this := &KeyserverConfig{}
	this.ServerID = uint64(uint64(r.Uint32()))
	this.Realm = randStringKeyserverconfig(r)
	this.VRFKeyID = randStringKeyserverconfig(r)
	v2 := NewPopulatedDuration(r, easy)
	this.MinEpochInterval = *v2
	v3 := NewPopulatedDuration(r, easy)
	this.MaxEpochInterval = *v3
	v4 := NewPopulatedDuration(r, easy)
	this.ProposalRetryInterval = *v4
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyKeyserverconfig interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneKeyserverconfig(r randyKeyserverconfig) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringKeyserverconfig(r randyKeyserverconfig) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneKeyserverconfig(r)
	}
	return string(tmps)
}
func randUnrecognizedKeyserverconfig(r randyKeyserverconfig, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldKeyserverconfig(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldKeyserverconfig(data []byte, r randyKeyserverconfig, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateKeyserverconfig(data, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		data = encodeVarintPopulateKeyserverconfig(data, uint64(v6))
	case 1:
		data = encodeVarintPopulateKeyserverconfig(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateKeyserverconfig(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateKeyserverconfig(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateKeyserverconfig(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateKeyserverconfig(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *ReplicaConfig) Size() (n int) {
	var l int
	_ = l
	l = m.KeyserverConfig.Size()
	n += 1 + l + sovKeyserverconfig(uint64(l))
	if m.ReplicaID != 0 {
		n += 1 + sovKeyserverconfig(uint64(m.ReplicaID))
	}
	l = len(m.SigningKeyID)
	if l > 0 {
		n += 1 + l + sovKeyserverconfig(uint64(l))
	}
	l = len(m.UpdateAddr)
	if l > 0 {
		n += 1 + l + sovKeyserverconfig(uint64(l))
	}
	if m.UpdateTLS != nil {
		l = m.UpdateTLS.Size()
		n += 1 + l + sovKeyserverconfig(uint64(l))
	}
	l = len(m.LookupAddr)
	if l > 0 {
		n += 1 + l + sovKeyserverconfig(uint64(l))
	}
	if m.LookupTLS != nil {
		l = m.LookupTLS.Size()
		n += 1 + l + sovKeyserverconfig(uint64(l))
	}
	l = len(m.VerifierAddr)
	if l > 0 {
		n += 1 + l + sovKeyserverconfig(uint64(l))
	}
	if m.VerifierTLS != nil {
		l = m.VerifierTLS.Size()
		n += 1 + l + sovKeyserverconfig(uint64(l))
	}
	l = len(m.HKPAddr)
	if l > 0 {
		n += 1 + l + sovKeyserverconfig(uint64(l))
	}
	if m.HKPTLS != nil {
		l = m.HKPTLS.Size()
		n += 1 + l + sovKeyserverconfig(uint64(l))
	}
	return n
}

func (m *KeyserverConfig) Size() (n int) {
	var l int
	_ = l
	if m.ServerID != 0 {
		n += 1 + sovKeyserverconfig(uint64(m.ServerID))
	}
	l = len(m.Realm)
	if l > 0 {
		n += 1 + l + sovKeyserverconfig(uint64(l))
	}
	l = len(m.VRFKeyID)
	if l > 0 {
		n += 1 + l + sovKeyserverconfig(uint64(l))
	}
	l = m.MinEpochInterval.Size()
	n += 1 + l + sovKeyserverconfig(uint64(l))
	l = m.MaxEpochInterval.Size()
	n += 1 + l + sovKeyserverconfig(uint64(l))
	l = m.ProposalRetryInterval.Size()
	n += 1 + l + sovKeyserverconfig(uint64(l))
	return n
}

func sovKeyserverconfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKeyserverconfig(x uint64) (n int) {
	return sovKeyserverconfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ReplicaConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicaConfig{`,
		`KeyserverConfig:` + strings.Replace(strings.Replace(this.KeyserverConfig.String(), "KeyserverConfig", "KeyserverConfig", 1), `&`, ``, 1) + `,`,
		`ReplicaID:` + fmt.Sprintf("%v", this.ReplicaID) + `,`,
		`SigningKeyID:` + fmt.Sprintf("%v", this.SigningKeyID) + `,`,
		`UpdateAddr:` + fmt.Sprintf("%v", this.UpdateAddr) + `,`,
		`UpdateTLS:` + strings.Replace(fmt.Sprintf("%v", this.UpdateTLS), "TLSConfig", "TLSConfig", 1) + `,`,
		`LookupAddr:` + fmt.Sprintf("%v", this.LookupAddr) + `,`,
		`LookupTLS:` + strings.Replace(fmt.Sprintf("%v", this.LookupTLS), "TLSConfig", "TLSConfig", 1) + `,`,
		`VerifierAddr:` + fmt.Sprintf("%v", this.VerifierAddr) + `,`,
		`VerifierTLS:` + strings.Replace(fmt.Sprintf("%v", this.VerifierTLS), "TLSConfig", "TLSConfig", 1) + `,`,
		`HKPAddr:` + fmt.Sprintf("%v", this.HKPAddr) + `,`,
		`HKPTLS:` + strings.Replace(fmt.Sprintf("%v", this.HKPTLS), "TLSConfig", "TLSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyserverConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyserverConfig{`,
		`ServerID:` + fmt.Sprintf("%v", this.ServerID) + `,`,
		`Realm:` + fmt.Sprintf("%v", this.Realm) + `,`,
		`VRFKeyID:` + fmt.Sprintf("%v", this.VRFKeyID) + `,`,
		`MinEpochInterval:` + strings.Replace(strings.Replace(this.MinEpochInterval.String(), "Duration", "Duration", 1), `&`, ``, 1) + `,`,
		`MaxEpochInterval:` + strings.Replace(strings.Replace(this.MaxEpochInterval.String(), "Duration", "Duration", 1), `&`, ``, 1) + `,`,
		`ProposalRetryInterval:` + strings.Replace(strings.Replace(this.ProposalRetryInterval.String(), "Duration", "Duration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringKeyserverconfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ReplicaConfig) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyserverConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthKeyserverconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KeyserverConfig.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ReplicaID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningKeyID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAddr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTLS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthKeyserverconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateTLS == nil {
				m.UpdateTLS = &TLSConfig{}
			}
			if err := m.UpdateTLS.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookupAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupAddr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookupTLS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthKeyserverconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LookupTLS == nil {
				m.LookupTLS = &TLSConfig{}
			}
			if err := m.LookupTLS.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifierAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifierAddr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifierTLS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthKeyserverconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerifierTLS == nil {
				m.VerifierTLS = &TLSConfig{}
			}
			if err := m.VerifierTLS.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HKPAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HKPAddr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HKPTLS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthKeyserverconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HKPTLS == nil {
				m.HKPTLS = &TLSConfig{}
			}
			if err := m.HKPTLS.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipKeyserverconfig(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeyserverconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	return nil
}
func (m *KeyserverConfig) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ServerID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Realm = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRFKeyID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinEpochInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthKeyserverconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinEpochInterval.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEpochInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthKeyserverconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxEpochInterval.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalRetryInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if msglen < 0 {
				return ErrInvalidLengthKeyserverconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposalRetryInterval.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipKeyserverconfig(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeyserverconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	return nil
}
func skipKeyserverconfig(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKeyserverconfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKeyserverconfig(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKeyserverconfig = fmt.Errorf("proto: negative length found during unmarshaling")
)
