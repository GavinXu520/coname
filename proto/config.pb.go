// Code generated by protoc-gen-gogo.
// source: config.proto
// DO NOT EDIT!

package proto

// discarding unused import gogoproto "gogoproto"

import fmt "fmt"
import bytes "bytes"

import strings "strings"
import github_com_andres_erbsen_protobuf_proto "github.com/andres-erbsen/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

type Config struct {
	Realms []*RealmConfig `protobuf:"bytes,1,rep,name=realms" json:"realms,omitempty"`
}

func (m *Config) Reset()      { *m = Config{} }
func (*Config) ProtoMessage() {}

func (m *Config) GetRealms() []*RealmConfig {
	if m != nil {
		return m.Realms
	}
	return nil
}

type RealmConfig struct {
	// Domains specifies a list of domains that belong to this realm.
	// Configuring one domain to belong to multiple realms is considered an
	// error.
	// TODO: support TLS-style wildcards.
	Domains []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	// Addr is the TCP (host:port) address of the keyserver GRPC interface.
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// URL is the location of the secondary, HTTP-based interface to the
	// keyserver. It is not necessarily on the same host as addr.
	URL string `protobuf:"bytes,3,opt,proto3" json:"URL,omitempty"`
	// VRFPublic is the public key of the verifiable random function used for
	// user id privacy. Here it is used to check that the anti-spam obfuscation
	// layer is properly used as a one-to-one mapping between real and
	// obfuscated usernames.
	VRFPublic []byte `protobuf:"bytes,4,opt,proto3" json:"VRFPublic,omitempty"`
	// VerificationPolicy specifies the conditions on how a lookup must be
	// verified for it to be accepted. Each verifier in VerificationPolicy MUST
	// have a NoOlderThan entry.
	VerificationPolicy *AuthorizationPolicy `protobuf:"bytes,5,opt,name=verification_policy" json:"verification_policy,omitempty"`
	// EpochTimeToLive specifies the duration for which an epoch is valid after
	// it has been issued. A client that has access to a clock MUST NOT accept
	// epoch heads with IssueTime more than EpochTimeToLive in the past.
	EpochTimeToLive Duration `protobuf:"bytes,6,opt,name=epoch_time_to_live" json:"epoch_time_to_live"`
	// TreeNonce is the global nonce that is hashed into the Merkle tree nodes.
	TreeNonce []byte `protobuf:"bytes,7,opt,name=tree_nonce,proto3" json:"tree_nonce,omitempty"`
}

func (m *RealmConfig) Reset()      { *m = RealmConfig{} }
func (*RealmConfig) ProtoMessage() {}

func (m *RealmConfig) GetVerificationPolicy() *AuthorizationPolicy {
	if m != nil {
		return m.VerificationPolicy
	}
	return nil
}

func (m *RealmConfig) GetEpochTimeToLive() Duration {
	if m != nil {
		return m.EpochTimeToLive
	}
	return Duration{}
}

func (this *Config) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Config)
	if !ok {
		return fmt.Errorf("that is not of type *Config")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Config but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Configbut is not nil && this == nil")
	}
	if len(this.Realms) != len(that1.Realms) {
		return fmt.Errorf("Realms this(%v) Not Equal that(%v)", len(this.Realms), len(that1.Realms))
	}
	for i := range this.Realms {
		if !this.Realms[i].Equal(that1.Realms[i]) {
			return fmt.Errorf("Realms this[%v](%v) Not Equal that[%v](%v)", i, this.Realms[i], i, that1.Realms[i])
		}
	}
	return nil
}
func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Config)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Realms) != len(that1.Realms) {
		return false
	}
	for i := range this.Realms {
		if !this.Realms[i].Equal(that1.Realms[i]) {
			return false
		}
	}
	return true
}
func (this *RealmConfig) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RealmConfig)
	if !ok {
		return fmt.Errorf("that is not of type *RealmConfig")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RealmConfig but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RealmConfigbut is not nil && this == nil")
	}
	if len(this.Domains) != len(that1.Domains) {
		return fmt.Errorf("Domains this(%v) Not Equal that(%v)", len(this.Domains), len(that1.Domains))
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return fmt.Errorf("Domains this[%v](%v) Not Equal that[%v](%v)", i, this.Domains[i], i, that1.Domains[i])
		}
	}
	if this.Addr != that1.Addr {
		return fmt.Errorf("Addr this(%v) Not Equal that(%v)", this.Addr, that1.Addr)
	}
	if this.URL != that1.URL {
		return fmt.Errorf("URL this(%v) Not Equal that(%v)", this.URL, that1.URL)
	}
	if !bytes.Equal(this.VRFPublic, that1.VRFPublic) {
		return fmt.Errorf("VRFPublic this(%v) Not Equal that(%v)", this.VRFPublic, that1.VRFPublic)
	}
	if !this.VerificationPolicy.Equal(that1.VerificationPolicy) {
		return fmt.Errorf("VerificationPolicy this(%v) Not Equal that(%v)", this.VerificationPolicy, that1.VerificationPolicy)
	}
	if !this.EpochTimeToLive.Equal(&that1.EpochTimeToLive) {
		return fmt.Errorf("EpochTimeToLive this(%v) Not Equal that(%v)", this.EpochTimeToLive, that1.EpochTimeToLive)
	}
	if !bytes.Equal(this.TreeNonce, that1.TreeNonce) {
		return fmt.Errorf("TreeNonce this(%v) Not Equal that(%v)", this.TreeNonce, that1.TreeNonce)
	}
	return nil
}
func (this *RealmConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RealmConfig)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if this.Addr != that1.Addr {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if !bytes.Equal(this.VRFPublic, that1.VRFPublic) {
		return false
	}
	if !this.VerificationPolicy.Equal(that1.VerificationPolicy) {
		return false
	}
	if !this.EpochTimeToLive.Equal(&that1.EpochTimeToLive) {
		return false
	}
	if !bytes.Equal(this.TreeNonce, that1.TreeNonce) {
		return false
	}
	return true
}
func (this *Config) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&proto.Config{` +
		`Realms:` + fmt.Sprintf("%#v", this.Realms) + `}`}, ", ")
	return s
}
func (this *RealmConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&proto.RealmConfig{` +
		`Domains:` + fmt.Sprintf("%#v", this.Domains),
		`Addr:` + fmt.Sprintf("%#v", this.Addr),
		`URL:` + fmt.Sprintf("%#v", this.URL),
		`VRFPublic:` + fmt.Sprintf("%#v", this.VRFPublic),
		`VerificationPolicy:` + fmt.Sprintf("%#v", this.VerificationPolicy),
		`EpochTimeToLive:` + strings.Replace(this.EpochTimeToLive.GoString(), `&`, ``, 1),
		`TreeNonce:` + fmt.Sprintf("%#v", this.TreeNonce) + `}`}, ", ")
	return s
}
func valueToGoStringConfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringConfig(e map[int32]github_com_andres_erbsen_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func NewPopulatedConfig(r randyConfig, easy bool) *Config {
	this := &Config{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.Realms = make([]*RealmConfig, v1)
		for i := 0; i < v1; i++ {
			this.Realms[i] = NewPopulatedRealmConfig(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRealmConfig(r randyConfig, easy bool) *RealmConfig {
	this := &RealmConfig{}
	v2 := r.Intn(10)
	this.Domains = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.Domains[i] = randStringConfig(r)
	}
	this.Addr = randStringConfig(r)
	this.URL = randStringConfig(r)
	v3 := r.Intn(100)
	this.VRFPublic = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.VRFPublic[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.VerificationPolicy = NewPopulatedAuthorizationPolicy(r, easy)
	}
	v4 := NewPopulatedDuration(r, easy)
	this.EpochTimeToLive = *v4
	v5 := r.Intn(100)
	this.TreeNonce = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.TreeNonce[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyConfig interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneConfig(r randyConfig) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringConfig(r randyConfig) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneConfig(r)
	}
	return string(tmps)
}
func randUnrecognizedConfig(r randyConfig, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldConfig(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldConfig(data []byte, r randyConfig, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateConfig(data, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		data = encodeVarintPopulateConfig(data, uint64(v7))
	case 1:
		data = encodeVarintPopulateConfig(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateConfig(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateConfig(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateConfig(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateConfig(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (this *Config) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Config{`,
		`Realms:` + strings.Replace(fmt.Sprintf("%v", this.Realms), "RealmConfig", "RealmConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RealmConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RealmConfig{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`Addr:` + fmt.Sprintf("%v", this.Addr) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`VRFPublic:` + fmt.Sprintf("%v", this.VRFPublic) + `,`,
		`VerificationPolicy:` + strings.Replace(fmt.Sprintf("%v", this.VerificationPolicy), "AuthorizationPolicy", "AuthorizationPolicy", 1) + `,`,
		`EpochTimeToLive:` + strings.Replace(strings.Replace(this.EpochTimeToLive.String(), "Duration", "Duration", 1), `&`, ``, 1) + `,`,
		`TreeNonce:` + fmt.Sprintf("%v", this.TreeNonce) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
