// Code generated by protoc-gen-gogo.
// source: keyserverlocal.proto
// DO NOT EDIT!

package proto

// discarding unused import gogoproto "gogoproto"

import fmt "fmt"
import bytes "bytes"

import strings "strings"
import github_com_andres_erbsen_protobuf_proto "github.com/andres-erbsen/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// ReplicaState contains the persistent internal state of a single replica.
// Additional on-disk state is descried in server/table.go.
type ReplicaState struct {
	// cached values derived purely from the state of the log
	NextIndexLog                    uint64         `protobuf:"varint,1,opt,name=next_index_log,proto3" json:"next_index_log,omitempty"`
	NextIndexVerifier               uint64         `protobuf:"varint,2,opt,name=next_index_verifier,proto3" json:"next_index_verifier,omitempty"`
	PreviousSummaryHash             []byte         `protobuf:"bytes,3,opt,name=previous_summary_hash,proto3" json:"previous_summary_hash,omitempty"`
	LastEpochDelimiter              EpochDelimiter `protobuf:"bytes,4,opt,name=last_epoch_delimiter" json:"last_epoch_delimiter"`
	ThisReplicaNeedsToSignLastEpoch bool           `protobuf:"varint,5,opt,name=this_replica_needs_to_sign_last_epoch,proto3" json:"this_replica_needs_to_sign_last_epoch,omitempty"`
	PendingUpdates                  bool           `protobuf:"varint,6,opt,name=pending_updates,proto3" json:"pending_updates,omitempty"`
	// local variables
	LatestTreeSnapshot         uint64 `protobuf:"varint,7,opt,name=latest_tree_snapshot,proto3" json:"latest_tree_snapshot,omitempty"`
	LastEpochNeedsRatification bool   `protobuf:"varint,8,opt,name=last_epoch_needs_ratification,proto3" json:"last_epoch_needs_ratification,omitempty"`
}

func (m *ReplicaState) Reset()      { *m = ReplicaState{} }
func (*ReplicaState) ProtoMessage() {}

func (m *ReplicaState) GetLastEpochDelimiter() EpochDelimiter {
	if m != nil {
		return m.LastEpochDelimiter
	}
	return EpochDelimiter{}
}

func (this *ReplicaState) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ReplicaState)
	if !ok {
		return fmt.Errorf("that is not of type *ReplicaState")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ReplicaState but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ReplicaStatebut is not nil && this == nil")
	}
	if this.NextIndexLog != that1.NextIndexLog {
		return fmt.Errorf("NextIndexLog this(%v) Not Equal that(%v)", this.NextIndexLog, that1.NextIndexLog)
	}
	if this.NextIndexVerifier != that1.NextIndexVerifier {
		return fmt.Errorf("NextIndexVerifier this(%v) Not Equal that(%v)", this.NextIndexVerifier, that1.NextIndexVerifier)
	}
	if !bytes.Equal(this.PreviousSummaryHash, that1.PreviousSummaryHash) {
		return fmt.Errorf("PreviousSummaryHash this(%v) Not Equal that(%v)", this.PreviousSummaryHash, that1.PreviousSummaryHash)
	}
	if !this.LastEpochDelimiter.Equal(&that1.LastEpochDelimiter) {
		return fmt.Errorf("LastEpochDelimiter this(%v) Not Equal that(%v)", this.LastEpochDelimiter, that1.LastEpochDelimiter)
	}
	if this.ThisReplicaNeedsToSignLastEpoch != that1.ThisReplicaNeedsToSignLastEpoch {
		return fmt.Errorf("ThisReplicaNeedsToSignLastEpoch this(%v) Not Equal that(%v)", this.ThisReplicaNeedsToSignLastEpoch, that1.ThisReplicaNeedsToSignLastEpoch)
	}
	if this.PendingUpdates != that1.PendingUpdates {
		return fmt.Errorf("PendingUpdates this(%v) Not Equal that(%v)", this.PendingUpdates, that1.PendingUpdates)
	}
	if this.LatestTreeSnapshot != that1.LatestTreeSnapshot {
		return fmt.Errorf("LatestTreeSnapshot this(%v) Not Equal that(%v)", this.LatestTreeSnapshot, that1.LatestTreeSnapshot)
	}
	if this.LastEpochNeedsRatification != that1.LastEpochNeedsRatification {
		return fmt.Errorf("LastEpochNeedsRatification this(%v) Not Equal that(%v)", this.LastEpochNeedsRatification, that1.LastEpochNeedsRatification)
	}
	return nil
}
func (this *ReplicaState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReplicaState)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NextIndexLog != that1.NextIndexLog {
		return false
	}
	if this.NextIndexVerifier != that1.NextIndexVerifier {
		return false
	}
	if !bytes.Equal(this.PreviousSummaryHash, that1.PreviousSummaryHash) {
		return false
	}
	if !this.LastEpochDelimiter.Equal(&that1.LastEpochDelimiter) {
		return false
	}
	if this.ThisReplicaNeedsToSignLastEpoch != that1.ThisReplicaNeedsToSignLastEpoch {
		return false
	}
	if this.PendingUpdates != that1.PendingUpdates {
		return false
	}
	if this.LatestTreeSnapshot != that1.LatestTreeSnapshot {
		return false
	}
	if this.LastEpochNeedsRatification != that1.LastEpochNeedsRatification {
		return false
	}
	return true
}
func (this *ReplicaState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&proto.ReplicaState{` +
		`NextIndexLog:` + fmt.Sprintf("%#v", this.NextIndexLog),
		`NextIndexVerifier:` + fmt.Sprintf("%#v", this.NextIndexVerifier),
		`PreviousSummaryHash:` + fmt.Sprintf("%#v", this.PreviousSummaryHash),
		`LastEpochDelimiter:` + strings.Replace(this.LastEpochDelimiter.GoString(), `&`, ``, 1),
		`ThisReplicaNeedsToSignLastEpoch:` + fmt.Sprintf("%#v", this.ThisReplicaNeedsToSignLastEpoch),
		`PendingUpdates:` + fmt.Sprintf("%#v", this.PendingUpdates),
		`LatestTreeSnapshot:` + fmt.Sprintf("%#v", this.LatestTreeSnapshot),
		`LastEpochNeedsRatification:` + fmt.Sprintf("%#v", this.LastEpochNeedsRatification) + `}`}, ", ")
	return s
}
func valueToGoStringKeyserverlocal(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringKeyserverlocal(e map[int32]github_com_andres_erbsen_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func NewPopulatedReplicaState(r randyKeyserverlocal, easy bool) *ReplicaState {
	this := &ReplicaState{}
	this.NextIndexLog = uint64(uint64(r.Uint32()))
	this.NextIndexVerifier = uint64(uint64(r.Uint32()))
	v1 := r.Intn(100)
	this.PreviousSummaryHash = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.PreviousSummaryHash[i] = byte(r.Intn(256))
	}
	v2 := NewPopulatedEpochDelimiter(r, easy)
	this.LastEpochDelimiter = *v2
	this.ThisReplicaNeedsToSignLastEpoch = bool(bool(r.Intn(2) == 0))
	this.PendingUpdates = bool(bool(r.Intn(2) == 0))
	this.LatestTreeSnapshot = uint64(uint64(r.Uint32()))
	this.LastEpochNeedsRatification = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyKeyserverlocal interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneKeyserverlocal(r randyKeyserverlocal) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringKeyserverlocal(r randyKeyserverlocal) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneKeyserverlocal(r)
	}
	return string(tmps)
}
func randUnrecognizedKeyserverlocal(r randyKeyserverlocal, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldKeyserverlocal(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldKeyserverlocal(data []byte, r randyKeyserverlocal, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateKeyserverlocal(data, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		data = encodeVarintPopulateKeyserverlocal(data, uint64(v4))
	case 1:
		data = encodeVarintPopulateKeyserverlocal(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateKeyserverlocal(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateKeyserverlocal(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateKeyserverlocal(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateKeyserverlocal(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (this *ReplicaState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicaState{`,
		`NextIndexLog:` + fmt.Sprintf("%v", this.NextIndexLog) + `,`,
		`NextIndexVerifier:` + fmt.Sprintf("%v", this.NextIndexVerifier) + `,`,
		`PreviousSummaryHash:` + fmt.Sprintf("%v", this.PreviousSummaryHash) + `,`,
		`LastEpochDelimiter:` + strings.Replace(strings.Replace(this.LastEpochDelimiter.String(), "EpochDelimiter", "EpochDelimiter", 1), `&`, ``, 1) + `,`,
		`ThisReplicaNeedsToSignLastEpoch:` + fmt.Sprintf("%v", this.ThisReplicaNeedsToSignLastEpoch) + `,`,
		`PendingUpdates:` + fmt.Sprintf("%v", this.PendingUpdates) + `,`,
		`LatestTreeSnapshot:` + fmt.Sprintf("%v", this.LatestTreeSnapshot) + `,`,
		`LastEpochNeedsRatification:` + fmt.Sprintf("%v", this.LastEpochNeedsRatification) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringKeyserverlocal(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
