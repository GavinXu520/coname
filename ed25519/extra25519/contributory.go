// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package extra25519

import (
	"math/big"

	"github.com/yahoo/coname/ed25519/edwards25519"
)

func decimalLE(s string) *[32]byte {
	var leb [32]byte
	var b big.Int
	if _, ok := b.SetString(s, 10); !ok {
		panic("invalid decimal")
	}
	if len(b.Bytes()) > 32 {
		panic("too big decimal")
	}
	// little endian
	for i := 0; i < len(b.Bytes()); i++ {
		leb[i] = b.Bytes()[len(b.Bytes())-1-i]
	}
	return &leb
}

func decimalFE(s string) *edwards25519.FieldElement {
	ret := new(edwards25519.FieldElement)
	edwards25519.FeFromBytes(ret, decimalLE(s))
	return ret
}

func decimalGE(s string, bit byte) *edwards25519.ExtendedGroupElement {
	mx := decimalFE(s)
	var ey edwards25519.FieldElement
	montgomeryXToEdwardsY(&ey, mx)
	ret := new(edwards25519.ExtendedGroupElement)
	ok := ret.FromParityAndY(bit, &ey)
	if !ok {
		panic("invalid group element")
	}
	// fmt.Printf("%s -> %x ->\n%v\n", s, ey, ret)
	return ret
}

func decimalGB(s string, bit byte) *[32]byte {
	var outB [32]byte
	p := decimalGE(s, bit)
	p.ToBytes(&outB)
	return &outB
}

// Q is the prime such that 8*Q is the order of the elliptic curve group.
var Q = decimalLE("7237005577332262213973186563042994240857116359379907606001950938285454250989")

// blacklist from http://cr.yp.to/ecdh.html#validate
var badPoints = []*[32]byte{
	&[32]byte{},
	decimalGB("0", 0), // 0
	decimalGB("1", 0), // 1
	decimalGB("325606250916557431795983626356110631294008115727848805560023387167927233504", 0),    // 325606250916557431795983626356110631294008115727848805560023387167927233504
	decimalGB("39382357235489614581723060781553021112529911719440698176882885853963445705823", 0),  // 39382357235489614581723060781553021112529911719440698176882885853963445705823
	decimalGB("57896044618658097711785492504343953926634992332820282019728792003956564819948", 0),  // 2^255 - 19 - 1
	decimalGB("57896044618658097711785492504343953926634992332820282019728792003956564819949", 0),  // 2^255 - 19
	decimalGB("57896044618658097711785492504343953926634992332820282019728792003956564819950", 0),  // 2^255 - 19 + 1
	decimalGB("97278401854147712293508553285896975039164904052260980196611677857920010525772", 0),  // 2^255 - 19 + 39382357235489614581723060781553021112529911719440698176882885853963445705823
	decimalGB("115792089237316195423570985008687907853269984665640564039457584007913129639898", 0), // 2(2^255 - 19)
	decimalGB("0", 1), // 0
	decimalGB("1", 1), // 1
	decimalGB("325606250916557431795983626356110631294008115727848805560023387167927233504", 1),    // 325606250916557431795983626356110631294008115727848805560023387167927233504
	decimalGB("39382357235489614581723060781553021112529911719440698176882885853963445705823", 1),  // 39382357235489614581723060781553021112529911719440698176882885853963445705823
	decimalGB("57896044618658097711785492504343953926634992332820282019728792003956564819948", 1),  // 2^255 - 19 - 1
	decimalGB("57896044618658097711785492504343953926634992332820282019728792003956564819949", 1),  // 2^255 - 19
	decimalGB("57896044618658097711785492504343953926634992332820282019728792003956564819950", 1),  // 2^255 - 19 + 1
	decimalGB("97278401854147712293508553285896975039164904052260980196611677857920010525772", 1),  // 2^255 - 19 + 39382357235489614581723060781553021112529911719440698176882885853963445705823
	decimalGB("115792089237316195423570985008687907853269984665640564039457584007913129639898", 1), // 2(2^255 - 19)

	// invalid: decimalGE("58221650869574655143581476130700064557929000448548130825288815391124492053453", 0),  // 2^255 - 19 + 325606250916557431795983626356110631294008115727848805560023387167927233504
	// invalid: decimalGE("58221650869574655143581476130700064557929000448548130825288815391124492053453", 1),  // 2^255 - 19 + 325606250916557431795983626356110631294008115727848805560023387167927233504
	// invalid: decimalGE("115792089237316195423570985008687907853269984665640564039457584007913129639897", 0), // 2(2^255 - 19) - 1
	// invalid: decimalGE("115792089237316195423570985008687907853269984665640564039457584007913129639899", 0), // 2(2^255 - 19) + 1
	// invalid: decimalGE("115792089237316195423570985008687907853269984665640564039457584007913129639897", 1), // 2(2^255 - 19) - 1
	// invalid: decimalGE("115792089237316195423570985008687907853269984665640564039457584007913129639899", 1), // 2(2^255 - 19) + 1
}

// checkContributory25519 returns true iff p is not in a small subgroup. The
// check is performed by comparing p against a blacklist from Curve25519.
func checkContributoryCurve25519(p *edwards25519.ExtendedGroupElement) bool {
	var outB [32]byte
	p.ToBytes(&outB)
	for _, bad := range badPoints {
		if outB == *bad {
			return false
		}
	}
	return true
}

// checkContributoryRef returns true iff p is not in a small subgroup. The
// check is performed using scalar multiplication by the large prime factor Q
// of the group order.
func checkContributoryRef(p *edwards25519.ExtendedGroupElement) bool {
	var outB [32]byte
	p.ToBytes(&outB)
	if outB == [32]byte{} {
		return false
	}
	var out edwards25519.ExtendedGroupElement
	edwards25519.GeScalarMult(&out, Q, p)
	out.ToBytes(&outB)
	return outB == [32]byte{1} // identity
}

func CheckContributory(p *edwards25519.ExtendedGroupElement) bool {
	return checkContributoryRef(p)
}
